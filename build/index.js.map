{"version":3,"file":"index.js","mappings":"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","sources":["webpack://better-accessibility/./src/attributes/aria-label.js","webpack://better-accessibility/external window [\"wp\",\"element\"]","webpack://better-accessibility/webpack/bootstrap","webpack://better-accessibility/webpack/runtime/compat get default export","webpack://better-accessibility/webpack/runtime/define property getters","webpack://better-accessibility/webpack/runtime/hasOwnProperty shorthand","webpack://better-accessibility/webpack/runtime/make namespace object"],"sourcesContent":["/* Add aria label to blocks */\n\nconst { addFilter } = wp.hooks;\nconst { __ } = wp.i18n;\n\n// Enable icon control on the following blocks\nconst enableAriaLabelOnBlocks = [\n    'core/button'\n];\n\nconst { createHigherOrderComponent } = wp.compose;\nconst { Fragment } = wp.element;\nconst { TextControl, ToolbarGroup, ToolbarButton, Popover } = wp.components;\nconst { BlockControls } = wp.blockEditor;\n\nimport { useState } from '@wordpress/element'\n\n/* Declare custom attributes */\nconst setAriaLabel = ( settings, name ) => {\n    // Do nothing if it's another block than our defined ones.\n    if ( ! enableAriaLabelOnBlocks.includes( name ) ) {\n        return settings;\n    }\n\n    return Object.assign( {}, settings, {\n        attributes: Object.assign( {}, settings.attributes, {\n            arialabel: { type: 'string' }\n        } ),\n    } );\n};\nwp.hooks.addFilter(\n    'blocks.registerBlockType',\n    'better-accessibility/arialabel',\n    setAriaLabel\n);\n\n/* Add custom control to blocks */\nconst withAriaLabel = createHigherOrderComponent( ( BlockEdit ) => {\n    return ( props ) => {\n\n    \tif ( ! enableAriaLabelOnBlocks.includes( props.name ) ) {\n            return (\n                <BlockEdit { ...props } />\n            );\n        }\n\n        const [ isVisible, setIsVisible ] = useState( false );\n        const toggleVisible = () => {\n            setIsVisible( ( state ) => ! state );\n        };\n\n        const { arialabel } = props.attributes;\n        const isAriaLabelSet = !! arialabel;\n\n        return (\n            <Fragment>\n                <BlockControls group=\"block\">\n                    <ToolbarGroup>\n                        <ToolbarButton\n                            icon=\"universal-access\"\n                            label={ __( 'Aria label', 'better-accessibility' ) }\n                            onClick={ toggleVisible }\n                            isActive={ isAriaLabelSet }\n                        />\n                        { isVisible &&\n                        <Popover position=\"bottom center\" noArrow focusOnMount={ false }>\n                            <div className=\"block-editor-link-control block-editor-link-control__field block-editor-link-control__arialabel\">\n                                <TextControl\n                                    label={ __( 'Aria label', 'better-accessibility' ) }\n                                    help={ __( 'The aria label attribute is used to provide a more explicit link label than the button text, to people using a screen reader. It is not visible on the screen.', 'better-accessibility' )}\n                                    value={ arialabel }\n                                    onChange={ ( value ) =>\n                                        props.setAttributes( { arialabel: value ? value : '' } )\n                                    }\n                                />\n                            </div>\n                        </Popover>\n                        }\n                    </ToolbarGroup>\n                </BlockControls>\n                <BlockEdit { ...props } />\n            </Fragment>\n        );\n    };\n}, 'withAriaLabel' );\nwp.hooks.addFilter(\n    'editor.BlockEdit',\n    'better-accessibility/with-inspector-controls',\n    withAriaLabel\n);","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["addFilter","wp","hooks","__","i18n","enableAriaLabelOnBlocks","createHigherOrderComponent","compose","Fragment","element","TextControl","ToolbarGroup","ToolbarButton","Popover","components","BlockControls","blockEditor","useState","setAriaLabel","settings","name","includes","Object","assign","attributes","arialabel","type","withAriaLabel","BlockEdit","props","isVisible","setIsVisible","toggleVisible","state","isAriaLabelSet","value","setAttributes"],"sourceRoot":""}